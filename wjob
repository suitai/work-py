#!/usr/bin/env python
""" command of talk through a socket """
import os
import sys
import pwd
from getopt import getopt, GetoptError
from socket import gethostbyname, gethostname

def speak(message, addr='127.0.0.1'):
    """ speak through a socket """
    if len(message) > 4096:
        sts.exit('message is too large')
    # send message
    (host, port) = _split_addr(addr)
    speak_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    speak_socket.settimeout(300)
    try:
        speak_socket.connect((host,port))
        speak_socket.send(message)
    except socket.error, detail:
        speak_socket.close()
        sys.exit('socket error: [%s:%d] %s ' % (host,port,detail))
    except socket.timeout:
        speak_socket.close()
        sys.exit('socket timeout')
    else:
        # accept message
        message = speak_socket.recv(4096) # bufsize
        return message

def usage():
    sys.exit('Usage: wjob submit <command>\n'    
             '            delete <jobid>\n')

def _submit(messages):
    if len(messages) > 0:
        # get info 
        addr = 'localhost'
        queue = '05_default'
        uid = os.getuid()
        user = pwd.getpwuid(uid)[0]
        host = gethostbyname(gethostname())
        job = ' '.join(messages[0:])
        # speak
        message = ('job add QUEUE %s UID %s USER %s HOST %s JOB %s'
                    % (queue,uid,user,host,job))
        reply = speak(message, addr=addr)
        sys.stdout.write('JobID %s\n' % reply)
    else:
        sys.exit('Usage: wjob submit <command>')

def _delete(messages):
    if len(messages) > 0:
        uid = os.getuid()
        addr = 'localhost'
        jobid = int(messages[0])
        message = ('job info %d' % jobid)
        reply = speak(message, addr=addr)
        if int(reply.split()[0]) == uid:
            message = ('job del %d' % jobid)
            reply = speak(message, addr=addr)
            if reply:
                sys.stdout.write('delete the %d job\n' % jobid)
        else:
            sys.exit('Error: You cannot delete the %d job', jobid)
    else:
        sys.exit('Usage: wjob delete <jobid>')

def _info(messages):
    if len(messages) > 0:
        uid = os.getuid()
        addr = 'localhost'
        jobid = int(messages[0])
        message = ('job info %d' % jobid)
        reply = speak(message, addr=addr)
        if reply:
            if int(reply.split()[0]) == uid:
                words = reply.split()
                uid = words[0]
                user = words[1]
                host = words[2]
                queue = words[3]
                command = words[4]
                status = words[5]
                sys.stdout.write('id: %s\n' 
                                 'user: %s %s\n'
                                 'host: %s\n'
                                 'queue: %s\n'
                                 'command: %s\n'
                                 'status: %s\n'
                                  % (jobid,user,uid,host,queue,command,status))
            else:
                sys.exit('Error: You cannot know about the %d job' % jobid)
    else:
        sys.exit('Usage: wjob info <jobid>')

def _list():
    addr = 'localhost'
    message = ('job list')
    reply = speak(message, addr=addr)
    if reply:
        results = ['ID  User     Queue            Status',
                   '----------------------------------------------']
        for line in reply.split('\n'):
            words = line.split()
            ident = '{0:>3}'.format(words[0])
            user = '{0:<8}'.format(words[1])
            if len(user) > 8:
                user = [user[i] for i in range(0, 8)]
            queue = '{0:<16}'.format(words[2])
            if len(queue) > 16:
                queue = [queue[i] for i in range(0, 16)]
            status = '{0:<16}'.format(words[3])
            results.append('%s %s %s %s' % (ident,user,queue,status))
        result = '\n'.join(results)
        sys.stdout.write('%s\n' % result)

if __name__ == '__main__':
    """ command execution """
    # handle options
    option = "h"
    long_option = ["help",]
    try:
        opt_list, args = getopt(sys.argv[1:], option, long_option)
    except GetoptError, detail:
        sys.exit('GetoptError: %s' % detail)
    for opt, arg in opt_list:
        if opt in ('-h', '--help'):
            usage()
    
    if len(args) > 0:
        messages = args[1:]
        if args[0] == 'submit': _submit(messages)        
        elif args[0] == 'delete': _delete(messages)        
        elif args[0] == 'info': _info(messages)        
        elif args[0] == 'list': _list()        
        else: usage()
    else:
        usage()
