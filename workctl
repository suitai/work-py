#!/usr/bin/env python
""" command of talk through a socket """

import sys
from getopt import getopt, GetoptError
try:
    from talk import speak
except ImportError, detail:
    sys.exit('ImportError: %s' % detail) 

def usage():
    sys.stdout.write('Usage: workctl [socket|queue|worker|job]\n')    

def _manage_socket(messages, reply):
    message_len = len(messages)
    # socket info
    result = ('Usage: socket [list]\n'
              '              [add <addres>]\n'
              '              [del <addres>]')
    if message_len > 1:
        if messages[1] == 'list':
            if reply:
                results = ['Addres           Status',
                           '---------------------------------']
                for line in reply.split('\n'):
                    words = line.split()
                    addr = '{0:<16}'.format(words[0])
                    status = '{0:<16}'.format(words[1])
                    results.append('%s %s' % (addr,status))
                result = '\n'.join(results)
        elif messages[1] == 'add' or messages[1] == 'del':
            result = ('Usage: socket %s <addres>' % messages[1])
            if message_len > 2:
                if reply: result = ('%s the "%s" socket' % (messages[1],messages[2]))
                else: result = ('Error: cannot %s the "%s" socket' % (messages[1],messages[2]))
    return result

def _manage_queue(messages, reply):
    message_len = len(messages) 
    # manage queue
    result = ('Usage: queue [list]\n'
              '             [add <name>]\n'
              '             [del <name>]')
    if message_len > 1:
        if messages[1] == 'list':
            if reply:
                results = ['Name             Status',
                           '---------------------------------']
                for line in reply.split('\n'):
                    words = line.split()
                    name = '{0:<16}'.format(words[0])
                    status = '{0:<16}'.format(words[1])
                    results.append('%s %s' % (name,status))
                result = '\n'.join(results)
        elif messages[1] == 'add' or messages[1] == 'del':
            result = ('Usage: queue %s <addres>' % messages[1])
            if message_len > 2:
                if reply: result = ('%s the "%s" queue' % (messages[1],messages[2]))
                else: result = ('Error: cannot %s the "%s" queue' % (messages[1],messages[2]))
    return result

def _manage_worker(messages, reply):
    message_len = len(messages)
    # manage worker
    reply_message = ('Usage: worker [list]\n'
                     '              [add <name>]\n'
                     '              [del <name>]')
    if message_len > 1:
        if messages[1] == 'list':
            if reply:
                results = ['Name             Status',
                           '---------------------------------']
                for line in reply.split('\n'):
                    words = line.split()
                    name = '{0:<16}'.format(words[0])
                    status = '{0:<16}'.format(words[1])
                    results.append('%s %s' % (name,status))
                result = '\n'.join(results)
        elif messages[1] == 'add' or messages[1] == 'del':
            result = ('Usage: worker %s <addres>' % messages[1])
            if message_len > 2:
                if reply: result = ('%s the "%s" worker' % (messages[1],messages[2]))
                else: result = ('Error: cannot %s the "%s" worker' % (messages[1],messages[2]))
    return result

def _manage_job(messages, reply):
    message_len = len(messages)
    # manage worker
    reply_message = ('Usage: job [list]\n'
                     '           [add <command>]\n'
                     '           [del <jobid>]')
    if message_len > 1:
        if messages[1] == 'list':
            if reply:
                results = ['ID  User     Queue            Status',
                           '----------------------------------------------']
                for line in reply.split('\n'):
                    words = line.split()
                    ident = '{0:>3}'.format(words[0])
                    user = '{0:<8}'.format(words[1])
                    if len(user) > 8:
                        user = [user[i] for i in range(0, 8)]
                    queue = '{0:<16}'.format(words[2]) 
                    if len(queue) > 16:
                        queue = [queue[i] for i in range(0, 16)]
                    status = '{0:<16}'.format(words[3])
                    results.append('%s %s %s %s' % (ident,user,queue,status))
                result = '\n'.join(results)
        elif messages[1] == 'add':
            reply_message = 'Usage: job add <command>'
            if message_len > 2:
                if reply:
                    result = ('add the job %s' % reply)
                else:
                    result = ('Error: cannot add the job')
        elif messages[1] == 'del':
            reply_message = 'Usage: job del <ident>'
            if message_len > 2:
                if reply:
                    result = ('delete the "%s" job' % messages[2])
                else:
                    result = ('Error: cannot find the "%s" job' % messages[2])
    return result

if __name__ == '__main__':
    """ command execution """
    result = 'Usage: workctl [socket|queue|worker|job]'
    # handle options
    option = "h"
    long_option = ["help",]
    try:
        opt_list, args = getopt(sys.argv[1:], option, long_option)
    except (GetoptError, detail):
        sys.exit('GetoptError: %s' % detail)
    for opt, arg in opt_list:
        if opt in ('-h', '--help'):
            sys.exit(result)
    # speak
    if len(args) > 0:
        addr = 'localhost'
        messages = args[0:]
        message = ' '.join(messages)
        reply = speak(message, addr=addr)
        if len(messages) > 0:
            # check
            if messages[0] == 'socket': result = _manage_socket(messages, reply)
            elif messages[0] == 'queue': result = _manage_queue(messages, reply)
            elif messages[0] == 'worker': result = _manage_worker(messages, reply)
            elif messages[0] == 'job': result = _manage_job(messages, reply)
    sys.stdout.write('%s\n' % result)    
